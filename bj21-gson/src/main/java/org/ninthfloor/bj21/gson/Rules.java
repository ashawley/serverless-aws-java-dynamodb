/*
 * Newrow 0.1.0
 * Blackjack
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: aaron.s.hawley@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ninthfloor.bj21.gson;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.ninthfloor.bj21.gson.RulesDealerStands;

/**
 * Rules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-12-03T09:06:06.451-05:00[America/New_York]")
public class Rules {
  /**
   * Payout for Blackjack (defaults: 3 to 2)
   */
  @JsonAdapter(BlackjackPaysEnum.Adapter.class)
  public enum BlackjackPaysEnum {
    _3_TO_2("3 to 2"),
    
    _6_TO_5("6 to 5");

    private String value;

    BlackjackPaysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlackjackPaysEnum fromValue(String value) {
      for (BlackjackPaysEnum b : BlackjackPaysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlackjackPaysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlackjackPaysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlackjackPaysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlackjackPaysEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BLACKJACK_PAYS = "blackjackPays";
  @SerializedName(SERIALIZED_NAME_BLACKJACK_PAYS)
  private BlackjackPaysEnum blackjackPays;

  public static final String SERIALIZED_NAME_DEALER_STANDS = "dealerStands";
  @SerializedName(SERIALIZED_NAME_DEALER_STANDS)
  private RulesDealerStands dealerStands;


  public Rules blackjackPays(BlackjackPaysEnum blackjackPays) {
    
    this.blackjackPays = blackjackPays;
    return this;
  }

   /**
   * Payout for Blackjack (defaults: 3 to 2)
   * @return blackjackPays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payout for Blackjack (defaults: 3 to 2)")

  public BlackjackPaysEnum getBlackjackPays() {
    return blackjackPays;
  }


  public void setBlackjackPays(BlackjackPaysEnum blackjackPays) {
    this.blackjackPays = blackjackPays;
  }


  public Rules dealerStands(RulesDealerStands dealerStands) {
    
    this.dealerStands = dealerStands;
    return this;
  }

   /**
   * Get dealerStands
   * @return dealerStands
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RulesDealerStands getDealerStands() {
    return dealerStands;
  }


  public void setDealerStands(RulesDealerStands dealerStands) {
    this.dealerStands = dealerStands;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rules rules = (Rules) o;
    return Objects.equals(this.blackjackPays, rules.blackjackPays) &&
        Objects.equals(this.dealerStands, rules.dealerStands);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackjackPays, dealerStands);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rules {\n");
    sb.append("    blackjackPays: ").append(toIndentedString(blackjackPays)).append("\n");
    sb.append("    dealerStands: ").append(toIndentedString(dealerStands)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

