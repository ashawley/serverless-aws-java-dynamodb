/*
 * Newrow 0.1.0
 * Blackjack
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: aaron.s.hawley@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ninthfloor.bj21.gson;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-12-03T09:06:06.451-05:00[America/New_York]")
public class Card {
  /**
   * Card suit
   */
  @JsonAdapter(SuitEnum.Adapter.class)
  public enum SuitEnum {
    SPADE("spade"),
    
    HEART("heart"),
    
    DIAMOND("diamond"),
    
    CLUB("club");

    private String value;

    SuitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitEnum fromValue(String value) {
      for (SuitEnum b : SuitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUIT = "suit";
  @SerializedName(SERIALIZED_NAME_SUIT)
  private SuitEnum suit;

  /**
   * Card face
   */
  @JsonAdapter(FaceEnum.Adapter.class)
  public enum FaceEnum {
    A("A"),
    
    K("K"),
    
    Q("Q"),
    
    J("J"),
    
    _10("10"),
    
    _9("9"),
    
    _8("8"),
    
    _7("7"),
    
    _6("6"),
    
    _5("5"),
    
    _4("4"),
    
    _3("3"),
    
    _2("2");

    private String value;

    FaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FaceEnum fromValue(String value) {
      for (FaceEnum b : FaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FaceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FACE = "face";
  @SerializedName(SERIALIZED_NAME_FACE)
  private FaceEnum face;


  public Card suit(SuitEnum suit) {
    
    this.suit = suit;
    return this;
  }

   /**
   * Card suit
   * @return suit
  **/
  @ApiModelProperty(required = true, value = "Card suit")

  public SuitEnum getSuit() {
    return suit;
  }


  public void setSuit(SuitEnum suit) {
    this.suit = suit;
  }


  public Card face(FaceEnum face) {
    
    this.face = face;
    return this;
  }

   /**
   * Card face
   * @return face
  **/
  @ApiModelProperty(required = true, value = "Card face")

  public FaceEnum getFace() {
    return face;
  }


  public void setFace(FaceEnum face) {
    this.face = face;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.suit, card.suit) &&
        Objects.equals(this.face, card.face);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suit, face);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    suit: ").append(toIndentedString(suit)).append("\n");
    sb.append("    face: ").append(toIndentedString(face)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

